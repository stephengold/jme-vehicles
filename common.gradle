// Gradle settings and tasks common to all jme-vehicles subprojects

apply plugin: 'checkstyle'
apply plugin: 'java'

ext {
    // module coordinates of external dependencies:
    garrettCoordinates = 'com.github.stephengold:Garrett:0.5.2'
    heartCoordinates = 'com.github.stephengold:Heart:8.3.2'
    jmePowerCoordinates = 'com.github.stephengold:JmePower:1.1.1'
    jmeTtfCoordinates = 'com.github.stephengold:jme-ttf:3.0.0'
    minieCoordinates = 'com.github.stephengold:Minie:7.3.0+for36'
    skyControlCoordinates = 'com.github.stephengold:SkyControl:1.0.3'

    // current versions of libraries:
    jme3Version = '3.6.0-stable'
    maVehiclesVersion = '0.7.1-SNAPSHOT'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

checkstyle {
    toolVersion '9.3'
}

tasks.withType(JavaCompile) { // Java compile-time options:
    options.compilerArgs << '-Xdiags:verbose'
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true // to provide detailed deprecation warnings
    options.encoding = 'UTF-8'
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_10)) {
        options.release = 8
    }
}

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
Boolean isMacOS = DefaultNativePlatform.currentOperatingSystem.isMacOsX()

tasks.withType(JavaExec) { // Java runtime options:
    if (isMacOS) {
        args '--noDialog'
        jvmArgs '-XstartOnFirstThread'
    }
    enableAssertions true
    //jvmArgs '-verbose:gc'
    jvmArgs '-Xms512m', '-Xmx512m', '-XX:MaxDirectMemorySize=1200m'
    //jvmArgs '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=10'
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds' // to disable caching of SNAPSHOTs
}
repositories {
    //mavenLocal() // to find local SNAPSHOTs of libraries
    mavenCentral()
    //maven { url 'https://s01.oss.sonatype.org/content/groups/staging' } // to find libraries staged but not yet released
}

// custom tasks for creating source/javadoc JARs:

tasks.register('javadocJar', Jar) {
    archiveClassifier = 'javadoc'
    dependsOn 'javadoc'
    description 'Creates a JAR of javadoc.'
    from javadoc.destinationDir
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier = 'sources'
    description 'Creates a JAR of sourcecode.'
    from sourceSets.main.allJava
}
