// Gradle script to build and run the MavDemo2 subproject of jme-vehicles

// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

plugins {
    id 'application' // to build JVM applications
}

application {
    mainClass = 'com.jayfella.jme.vehicle.niftydemo.MavDemo2'
}

dependencies {
    runtimeOnly(libs.jme3.awt.dialogs)
    implementation(libs.jme3.desktop)
    runtimeOnly(libs.jme3.jogg)
    runtimeOnly(libs.jme3.lwjgl3)

    // MavDemo2 doesn't use jme3-plugins
    //  -- it is included solely to avoid warnings from AssetConfig.
    runtimeOnly(libs.jme3.plugins)

    // non-JME dependencies:
    runtimeOnly(libs.nifty.style.black)
    implementation(libs.acorus)
    implementation(libs.jme3.utilities.nifty)
    implementation(libs.garrett)
    implementation(libs.jmePower)
    implementation(libs.minie)
    implementation(libs.skyControl)

    implementation project(':MavCommon')
    implementation project(':MavLibrary') // for local library build
    //implementation 'com.github.stephengold:MaVehicles:' + maVehiclesVersion // for published library
}

tasks.register('debugForceDialog', JavaExec) {
    args = ['--forceDialog']
    classpath sourceSets.main.runtimeClasspath
    debug true
    mainClass = 'com.jayfella.jme.vehicle.niftydemo.MavDemo2'
}

tasks.register('runForceDialog', JavaExec) {
    args = ['--forceDialog']
    classpath sourceSets.main.runtimeClasspath
    mainClass = 'com.jayfella.jme.vehicle.niftydemo.MavDemo2'
}

// Register cleanup tasks:

clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSOs')
clean.dependsOn('cleanScreenShots')

tasks.register('cleanDLLs', Delete) { // extracted Windows native libraries
    delete fileTree(dir: '.', include: '*.dll')
}
tasks.register('cleanDyLibs', Delete) { // extracted macOS native libraries
    delete fileTree(dir: '.', include: '*.dylib')
}
tasks.register('cleanLogs', Delete) { // JVM crash logs
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
tasks.register('cleanSOs', Delete) { // extracted Linux and Android native libraries
    delete fileTree(dir: '.', include: '*.so')
}
tasks.register('cleanScreenShots', Delete) {
    delete fileTree(dir: '.', include: 'screen_shot*.png')
}
